 Targeted for 0.5 Alpha 4

    * peak.binding

      - Metaclass-free activation mechanism

      - Cleanup/document attribute binding interface

    * peak.security

      - Refactor to use dispatch system, add docs w/examples

      - Define a framework for authentication

    * peak.running.logs

      - Separate formatters from publishers

      - Refactor to use 'dispatch' package to manage event distribution
        (i.e., use generic-function rules)

    * peak.util

      - Better documentation for SOX

    * peak.web

      - Rethink context objects

      - Conditional views

      - Menus









 Targeted for 0.5 Final Release (or sooner)

    * peak.naming

        - useful example "flat" naming context (e.g. like AppUtils.URLkeys)

        - useful example hierarchical naming context (e.g. like JNDI's LDAP
          context or a filesystem context)

        - rework smtp: to return a factory object that supports open().
          Also think about whether smtp should move to peak.net?

    * peak.config

      - Replace IMainLoop activity monitoring with a plugin-based mechanism?

      - plugin keys ordered by definition sequence, rather than randomly

      - ZConfig factory support to allow "smart" interpretation of strings,
        section names, etc.

    * peak.running.commands

       - Add "error formatting" and "error reporting" services

    * Transaction/storage refactorings

      - transaction scopes for commands and tasks

      - integrate locks with transactions

      - transactable persistent queues

      - ws.ElementClass.find()/ws.ElementClass.get() queries







    * peak.web

       - Allow DOMlets access to parse location info (file and line number)

       - default error templates, w/useful info

       - A set of simple, basic form controls that handle value rendering only
         (form metadata, validation, etc. will be handled by peak.web.forms in
         a later release)

       - conditional GET support (last modified/ETag) for static resources

       - image resources

    * Drop 'persistence' package, since ZODB 4 has been derailed.  Change to
      "state-delegation" model, which will integrate better with 'peak.query'.

























 Targeted for version 0.6

   * Functional/acceptance tests that access "real" databases, LDAP, etc.

   * Get XMI writing in place, w/transaction support

   * Generate UML 1.5 and CWM 1.0 and 1.1, and add them to the
     'setup.py' package lists.

   * On-the-fly class combination (think "runtime module inheritance",
     but possibly without the modules) for workspaces.

   * Lock management interfaces/API for peak.storage

   * Support for sending and receiving remote cache invalidation
     messages between workspaces.

   * Make 'cluster' parser complain about things that would cause
     the clusterit tools to choke or barf on the file, or which would
     produce ambiguous or unintended results.  (Or replace with ZConfig
     schema that can generate clusterit files.  And/or replace clusterit
     tools with PEAK ones.)



















